/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tschrock.roku.uploader;

import java.awt.Point;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tyler
 */
public class DateDialog extends javax.swing.JDialog {

    /**
     * Creates new form DateDialog
     */
    public DateDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(102, 170, 61));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 170, 61));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(8, 26, 0)));

        jButton4.setText("Ok");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setText(">");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<Chosen Date>");

        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Today");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(180, 218, 150));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTable1.setBackground(new java.awt.Color(180, 218, 150));
        jTable1.setModel(mTableModel);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setSelectionBackground(new java.awt.Color(102, 170, 61));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);
        //setAlwaysOnTop(false);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        int row = jTable1.getSelectedRow();
        int col = jTable1.getSelectedColumn();
        Object val = jTable1.getValueAt(row, col);
        if(val != null){
            int intval = (int)val;
            
            if(intval > 0 && intval < 32){
                gcal.set(Calendar.DAY_OF_MONTH, intval);
                jLabel1.setText(strDates[gcal.get(Calendar.MONTH)] + " " + gcal.get(Calendar.DAY_OF_MONTH) + ", " + gcal.get(Calendar.YEAR));
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        gcal = new GregorianCalendar();
        jLabel1.setText(strDates[gcal.get(Calendar.MONTH)] + " " + gcal.get(Calendar.DAY_OF_MONTH) + ", " + gcal.get(Calendar.YEAR));
        updateDays();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int newmonth = gcal.get(Calendar.MONTH)- 1;
        
        if(newmonth < gcal.getMinimum(Calendar.MONTH)){
            gcal.set(Calendar.YEAR,  gcal.get(Calendar.YEAR) - 1);
            gcal.set(Calendar.MONTH,  gcal.getMaximum(Calendar.MONTH));
        }
        else {
            gcal.set(Calendar.MONTH,  newmonth);
        }
        updateDays();
        jLabel1.setText(strDates[gcal.get(Calendar.MONTH)] + " " + gcal.get(Calendar.DAY_OF_MONTH) + ", " + gcal.get(Calendar.YEAR));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int newmonth = gcal.get(Calendar.MONTH) + 1;
        
        if(newmonth > gcal.getMaximum(Calendar.MONTH)){
            gcal.set(Calendar.YEAR,  gcal.get(Calendar.YEAR) + 1);
            gcal.set(Calendar.MONTH,  gcal.getMinimum(Calendar.MONTH));
        }
        else {
            gcal.set(Calendar.MONTH,  newmonth);
        }
        updateDays();
        jLabel1.setText(strDates[gcal.get(Calendar.MONTH)] + " " + gcal.get(Calendar.DAY_OF_MONTH) + ", " + gcal.get(Calendar.YEAR));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        updateDays();
        jLabel1.setText(strDates[gcal.get(Calendar.MONTH)] + " " + gcal.get(Calendar.DAY_OF_MONTH) + ", " + gcal.get(Calendar.YEAR));
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                DateDialog dialog = new DateDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public GregorianCalendar showDialog(Point thelocation) {
        pack();
        //System.out.println(thelocation);
        setLocation(thelocation);
        //setAlwaysOnTop(true);
        //requestFocus();
        //setAlwaysOnTop(false);
        setVisible(true);
        return gcal;
    }
    
    private void updateDays(){
        
         //make a new calendar
        GregorianCalendar theCal = (GregorianCalendar)gcal.clone();
        
        //System.out.println(theCal.get(Calendar.DAY_OF_WEEK));
        //System.out.println(theCal);
        
         //Set it to the first of the month
        theCal.set(Calendar.DATE, 1);
        
        //System.out.println(theCal.get(Calendar.DAY_OF_WEEK));
        //System.out.println(theCal);
        
         //Get the day of the week
        int monthStart = theCal.get(Calendar.DAY_OF_WEEK);
        //System.out.println(monthStart);
        
         
        int val = -(monthStart - 1);
        //System.out.println(val);
        
        int maxWeeks = theCal.getActualMaximum(Calendar.WEEK_OF_MONTH);
        //System.out.println(maxWeeks);
        //System.out.println(mTableModel.getRowCount());
        
        
        mTableModel.setRowCount(maxWeeks);
        
        //System.out.println(maxWeeks);
        //System.out.println(mTableModel.getRowCount());
        
        for(int row = 0; row < mTableModel.getRowCount(); row++){
            for(int col = 0; col < mTableModel.getColumnCount(); col++){
                val++;
                if(val > 0 && val < theCal.getActualMaximum(Calendar.DAY_OF_MONTH) + 1){
                    mTableModel.setValueAt(val, row, col);
                    if(val == gcal.get(Calendar.DATE)){
                        jTable1.changeSelection(row, col, false, false);
                    }
                }
                else {
                    mTableModel.setValueAt(null, row, col);
                }
            } 
        }
        
        //Dimension d = jTable1.getPreferredSize();
        //jTable1.setPreferredScrollableViewportSize(new Dimension(d.width,jTable1.getRowHeight()*jTable1.getRowCount()+1));
        
        
        //jScrollPane1.getViewport().setPreferredSize(new Dimension(d.width,jTable1.getRowHeight()*jTable1.getRowCount()+1));
        //jScrollPane1.setPreferredSize(new Dimension(d.width,jTable1.getRowHeight()*jTable1.getRowCount()+1));
        
        //jScrollPane1.getViewport().setPreferredSize(new Dimension(jTable1.getPreferredSize().width, jTable1.getPreferredSize().height));
        
    }
    
    private String[] strDates = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
    
    private GregorianCalendar gcal = new GregorianCalendar();
    
    Object rowData[][] = {{"S","M","T","W","T","F","S"}};
    Object columnNames[] = {"S","M","T","W","T","F","S"};
    CalendarTableModel mTableModel = new CalendarTableModel(rowData, columnNames);
    
    public class CalendarTableModel extends DefaultTableModel{

        public CalendarTableModel() {
        }

        public CalendarTableModel(Object[] columnNames, int rowCount) {
            super(columnNames, rowCount);
        }

        public CalendarTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }

        public CalendarTableModel(Vector data, Vector columnNames) {
            super(data, columnNames);
        }

        public CalendarTableModel(Vector columnNames, int rowCount) {
            super(columnNames, rowCount);
        }

        public CalendarTableModel(int rowCount, int columnCount) {
            super(rowCount, columnCount);
        }
        
        @Override
        public boolean isCellEditable(int row, int column){
            return false;
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
